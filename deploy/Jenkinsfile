pipeline {
    options {
        timestamps()
        skipDefaultCheckout()
        disableConcurrentBuilds()
    }
    agent {
        node { label 'transltr-ci-build-node-03' }
    }
    parameters {
        string(name: 'BUILD_VERSION', defaultValue: '', description: 'The build version to deploy (optional)')
        string(name: 'AWS_REGION', defaultValue: 'us-east-1', description: 'AWS Region to deploy')
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    environment {
        DOCKER_REPO_NAME = "853771734544.dkr.ecr.us-east-1.amazonaws.com/translator-bte-pending-api"
        KUBERNETES_BLUE_CLUSTER_NAME = "translator-eks-ci-blue-cluster"
        KUBERNETES_GREEN_CLUSTER_NAME = "translator-eks-ci-green-cluster"
        PACKAGE_DIR = "docker"
    }
    stages {
        stage('Build Version'){
            when { expression { return !params.BUILD_VERSION } }
            steps{
                script {
                    BUILD_VERSION_GENERATED = VersionNumber(
                        versionNumberString: 'v${BUILD_YEAR, XX}.${BUILD_MONTH, XX}${BUILD_DAY, XX}.${BUILDS_TODAY}',
                        projectStartDate:    '1970-01-01',
                        skipFailedBuilds:    true)
                    currentBuild.displayName = BUILD_VERSION_GENERATED
                    env.BUILD_VERSION = BUILD_VERSION_GENERATED
                    env.BUILD = 'true'
                }
            }
        }
        stage('Checkout source code') {
            steps {
                cleanWs()
                checkout scm
            }
        }
        stage('Build Docker') {
            when { expression { return env.BUILD == 'true' }}
            steps {
                dir(env.PACKAGE_DIR) {
                    script {
                        sh '''
                            aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${DOCKER_REPO_NAME}
                        '''

                        // Build and push Python image
                        def pythonImage = "${DOCKER_REPO_NAME}-python"
                        docker.build(pythonImage, "-f Dockerfile.python --no-cache .")
                        docker.image(pythonImage).push("${BUILD_VERSION}")

                        // Build and push Caddy image
                        def caddyImage = "${DOCKER_REPO_NAME}-caddy"
                        docker.build(caddyImage, "-f Dockerfile.caddy --no-cache .")
                        docker.image(caddyImage).push("${BUILD_VERSION}")
                    }
                }
            }
        }
        stage('Deploy to AWS EKS Blue') {
            agent {
                label 'translator && ci && deploy'
            }
            steps {
                checkout scm
                configFileProvider([
                    configFile(fileId: 'values-ci.yaml', targetLocation: 'deploy/values-ncats.yaml')
                ]){
                    sh '''
                        aws --region ${AWS_REGION} eks update-kubeconfig --name ${KUBERNETES_BLUE_CLUSTER_NAME}
                        cd deploy/ && /bin/bash deploy.sh
                       '''
                }
            }
            post {
                always {
                    echo " Clean up the workspace in deploy node!"
                    cleanWs()
                }
            }
        }
    }
}
